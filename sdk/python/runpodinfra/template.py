# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TemplateArgs', 'Template']

@pulumi.input_type
class TemplateArgs:
    def __init__(__self__, *,
                 container_disk_in_gb: pulumi.Input[int],
                 docker_args: pulumi.Input[str],
                 env: pulumi.Input[Sequence[pulumi.Input['PodEnvArgs']]],
                 image_name: pulumi.Input[str],
                 name: pulumi.Input[str],
                 volume_in_gb: pulumi.Input[int],
                 container_registry_auth_id: Optional[pulumi.Input[str]] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 is_serverless: Optional[pulumi.Input[bool]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 readme: Optional[pulumi.Input[str]] = None,
                 start_jupyter: Optional[pulumi.Input[bool]] = None,
                 start_ssh: Optional[pulumi.Input[bool]] = None,
                 volume_mount_path: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Template resource.
        """
        pulumi.set(__self__, "container_disk_in_gb", container_disk_in_gb)
        pulumi.set(__self__, "docker_args", docker_args)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "volume_in_gb", volume_in_gb)
        if container_registry_auth_id is not None:
            pulumi.set(__self__, "container_registry_auth_id", container_registry_auth_id)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if is_serverless is not None:
            pulumi.set(__self__, "is_serverless", is_serverless)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readme is not None:
            pulumi.set(__self__, "readme", readme)
        if start_jupyter is not None:
            pulumi.set(__self__, "start_jupyter", start_jupyter)
        if start_ssh is not None:
            pulumi.set(__self__, "start_ssh", start_ssh)
        if volume_mount_path is not None:
            pulumi.set(__self__, "volume_mount_path", volume_mount_path)

    @property
    @pulumi.getter(name="containerDiskInGb")
    def container_disk_in_gb(self) -> pulumi.Input[int]:
        return pulumi.get(self, "container_disk_in_gb")

    @container_disk_in_gb.setter
    def container_disk_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "container_disk_in_gb", value)

    @property
    @pulumi.getter(name="dockerArgs")
    def docker_args(self) -> pulumi.Input[str]:
        return pulumi.get(self, "docker_args")

    @docker_args.setter
    def docker_args(self, value: pulumi.Input[str]):
        pulumi.set(self, "docker_args", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[Sequence[pulumi.Input['PodEnvArgs']]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[Sequence[pulumi.Input['PodEnvArgs']]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="volumeInGb")
    def volume_in_gb(self) -> pulumi.Input[int]:
        return pulumi.get(self, "volume_in_gb")

    @volume_in_gb.setter
    def volume_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "volume_in_gb", value)

    @property
    @pulumi.getter(name="containerRegistryAuthId")
    def container_registry_auth_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_registry_auth_id")

    @container_registry_auth_id.setter
    def container_registry_auth_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_registry_auth_id", value)

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_public")

    @is_public.setter
    def is_public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_public", value)

    @property
    @pulumi.getter(name="isServerless")
    def is_serverless(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_serverless")

    @is_serverless.setter
    def is_serverless(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_serverless", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def readme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "readme")

    @readme.setter
    def readme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "readme", value)

    @property
    @pulumi.getter(name="startJupyter")
    def start_jupyter(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "start_jupyter")

    @start_jupyter.setter
    def start_jupyter(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "start_jupyter", value)

    @property
    @pulumi.getter(name="startSsh")
    def start_ssh(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "start_ssh")

    @start_ssh.setter
    def start_ssh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "start_ssh", value)

    @property
    @pulumi.getter(name="volumeMountPath")
    def volume_mount_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_mount_path")

    @volume_mount_path.setter
    def volume_mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_mount_path", value)


class Template(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_disk_in_gb: Optional[pulumi.Input[int]] = None,
                 container_registry_auth_id: Optional[pulumi.Input[str]] = None,
                 docker_args: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PodEnvArgs']]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 is_serverless: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 readme: Optional[pulumi.Input[str]] = None,
                 start_jupyter: Optional[pulumi.Input[bool]] = None,
                 start_ssh: Optional[pulumi.Input[bool]] = None,
                 volume_in_gb: Optional[pulumi.Input[int]] = None,
                 volume_mount_path: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Template resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Template resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_disk_in_gb: Optional[pulumi.Input[int]] = None,
                 container_registry_auth_id: Optional[pulumi.Input[str]] = None,
                 docker_args: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PodEnvArgs']]]]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 is_serverless: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 readme: Optional[pulumi.Input[str]] = None,
                 start_jupyter: Optional[pulumi.Input[bool]] = None,
                 start_ssh: Optional[pulumi.Input[bool]] = None,
                 volume_in_gb: Optional[pulumi.Input[int]] = None,
                 volume_mount_path: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TemplateArgs.__new__(TemplateArgs)

            if container_disk_in_gb is None and not opts.urn:
                raise TypeError("Missing required property 'container_disk_in_gb'")
            __props__.__dict__["container_disk_in_gb"] = container_disk_in_gb
            __props__.__dict__["container_registry_auth_id"] = container_registry_auth_id
            if docker_args is None and not opts.urn:
                raise TypeError("Missing required property 'docker_args'")
            __props__.__dict__["docker_args"] = docker_args
            if env is None and not opts.urn:
                raise TypeError("Missing required property 'env'")
            __props__.__dict__["env"] = env
            if image_name is None and not opts.urn:
                raise TypeError("Missing required property 'image_name'")
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["is_public"] = is_public
            __props__.__dict__["is_serverless"] = is_serverless
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["ports"] = ports
            __props__.__dict__["readme"] = readme
            __props__.__dict__["start_jupyter"] = start_jupyter
            __props__.__dict__["start_ssh"] = start_ssh
            if volume_in_gb is None and not opts.urn:
                raise TypeError("Missing required property 'volume_in_gb'")
            __props__.__dict__["volume_in_gb"] = volume_in_gb
            __props__.__dict__["volume_mount_path"] = volume_mount_path
            __props__.__dict__["template"] = None
        super(Template, __self__).__init__(
            'runpod:index:Template',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Template':
        """
        Get an existing Template resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TemplateArgs.__new__(TemplateArgs)

        __props__.__dict__["container_disk_in_gb"] = None
        __props__.__dict__["container_registry_auth_id"] = None
        __props__.__dict__["docker_args"] = None
        __props__.__dict__["env"] = None
        __props__.__dict__["image_name"] = None
        __props__.__dict__["is_public"] = None
        __props__.__dict__["is_serverless"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["ports"] = None
        __props__.__dict__["readme"] = None
        __props__.__dict__["start_jupyter"] = None
        __props__.__dict__["start_ssh"] = None
        __props__.__dict__["template"] = None
        __props__.__dict__["volume_in_gb"] = None
        __props__.__dict__["volume_mount_path"] = None
        return Template(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="containerDiskInGb")
    def container_disk_in_gb(self) -> pulumi.Output[int]:
        return pulumi.get(self, "container_disk_in_gb")

    @property
    @pulumi.getter(name="containerRegistryAuthId")
    def container_registry_auth_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "container_registry_auth_id")

    @property
    @pulumi.getter(name="dockerArgs")
    def docker_args(self) -> pulumi.Output[str]:
        return pulumi.get(self, "docker_args")

    @property
    @pulumi.getter
    def env(self) -> pulumi.Output[Sequence['outputs.PodEnv']]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter(name="isServerless")
    def is_serverless(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_serverless")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def readme(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "readme")

    @property
    @pulumi.getter(name="startJupyter")
    def start_jupyter(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "start_jupyter")

    @property
    @pulumi.getter(name="startSsh")
    def start_ssh(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "start_ssh")

    @property
    @pulumi.getter
    def template(self) -> pulumi.Output['outputs.Template']:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="volumeInGb")
    def volume_in_gb(self) -> pulumi.Output[int]:
        return pulumi.get(self, "volume_in_gb")

    @property
    @pulumi.getter(name="volumeMountPath")
    def volume_mount_path(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "volume_mount_path")

