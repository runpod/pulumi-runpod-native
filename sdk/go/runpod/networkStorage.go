// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package runpod

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/runpod/pulumi-runpod-native/sdk/go/runpod/internal"
)

type NetworkStorage struct {
	pulumi.CustomResourceState

	DataCenterId   pulumi.StringOutput      `pulumi:"dataCenterId"`
	Name           pulumi.StringOutput      `pulumi:"name"`
	NetworkStorage NetworkStorageTypeOutput `pulumi:"networkStorage"`
	Size           pulumi.IntOutput         `pulumi:"size"`
}

// NewNetworkStorage registers a new resource with the given unique name, arguments, and options.
func NewNetworkStorage(ctx *pulumi.Context,
	name string, args *NetworkStorageArgs, opts ...pulumi.ResourceOption) (*NetworkStorage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataCenterId == nil {
		return nil, errors.New("invalid value for required argument 'DataCenterId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkStorage
	err := ctx.RegisterResource("runpod:index:NetworkStorage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkStorage gets an existing NetworkStorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkStorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkStorageState, opts ...pulumi.ResourceOption) (*NetworkStorage, error) {
	var resource NetworkStorage
	err := ctx.ReadResource("runpod:index:NetworkStorage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkStorage resources.
type networkStorageState struct {
}

type NetworkStorageState struct {
}

func (NetworkStorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkStorageState)(nil)).Elem()
}

type networkStorageArgs struct {
	DataCenterId string `pulumi:"dataCenterId"`
	Name         string `pulumi:"name"`
	Size         int    `pulumi:"size"`
}

// The set of arguments for constructing a NetworkStorage resource.
type NetworkStorageArgs struct {
	DataCenterId pulumi.StringInput
	Name         pulumi.StringInput
	Size         pulumi.IntInput
}

func (NetworkStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkStorageArgs)(nil)).Elem()
}

type NetworkStorageInput interface {
	pulumi.Input

	ToNetworkStorageOutput() NetworkStorageOutput
	ToNetworkStorageOutputWithContext(ctx context.Context) NetworkStorageOutput
}

func (*NetworkStorage) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkStorage)(nil)).Elem()
}

func (i *NetworkStorage) ToNetworkStorageOutput() NetworkStorageOutput {
	return i.ToNetworkStorageOutputWithContext(context.Background())
}

func (i *NetworkStorage) ToNetworkStorageOutputWithContext(ctx context.Context) NetworkStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkStorageOutput)
}

// NetworkStorageArrayInput is an input type that accepts NetworkStorageArray and NetworkStorageArrayOutput values.
// You can construct a concrete instance of `NetworkStorageArrayInput` via:
//
//	NetworkStorageArray{ NetworkStorageArgs{...} }
type NetworkStorageArrayInput interface {
	pulumi.Input

	ToNetworkStorageArrayOutput() NetworkStorageArrayOutput
	ToNetworkStorageArrayOutputWithContext(context.Context) NetworkStorageArrayOutput
}

type NetworkStorageArray []NetworkStorageInput

func (NetworkStorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkStorage)(nil)).Elem()
}

func (i NetworkStorageArray) ToNetworkStorageArrayOutput() NetworkStorageArrayOutput {
	return i.ToNetworkStorageArrayOutputWithContext(context.Background())
}

func (i NetworkStorageArray) ToNetworkStorageArrayOutputWithContext(ctx context.Context) NetworkStorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkStorageArrayOutput)
}

// NetworkStorageMapInput is an input type that accepts NetworkStorageMap and NetworkStorageMapOutput values.
// You can construct a concrete instance of `NetworkStorageMapInput` via:
//
//	NetworkStorageMap{ "key": NetworkStorageArgs{...} }
type NetworkStorageMapInput interface {
	pulumi.Input

	ToNetworkStorageMapOutput() NetworkStorageMapOutput
	ToNetworkStorageMapOutputWithContext(context.Context) NetworkStorageMapOutput
}

type NetworkStorageMap map[string]NetworkStorageInput

func (NetworkStorageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkStorage)(nil)).Elem()
}

func (i NetworkStorageMap) ToNetworkStorageMapOutput() NetworkStorageMapOutput {
	return i.ToNetworkStorageMapOutputWithContext(context.Background())
}

func (i NetworkStorageMap) ToNetworkStorageMapOutputWithContext(ctx context.Context) NetworkStorageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkStorageMapOutput)
}

type NetworkStorageOutput struct{ *pulumi.OutputState }

func (NetworkStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkStorage)(nil)).Elem()
}

func (o NetworkStorageOutput) ToNetworkStorageOutput() NetworkStorageOutput {
	return o
}

func (o NetworkStorageOutput) ToNetworkStorageOutputWithContext(ctx context.Context) NetworkStorageOutput {
	return o
}

func (o NetworkStorageOutput) DataCenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkStorage) pulumi.StringOutput { return v.DataCenterId }).(pulumi.StringOutput)
}

func (o NetworkStorageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkStorage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetworkStorageOutput) NetworkStorage() NetworkStorageTypeOutput {
	return o.ApplyT(func(v *NetworkStorage) NetworkStorageTypeOutput { return v.NetworkStorage }).(NetworkStorageTypeOutput)
}

func (o NetworkStorageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkStorage) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

type NetworkStorageArrayOutput struct{ *pulumi.OutputState }

func (NetworkStorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkStorage)(nil)).Elem()
}

func (o NetworkStorageArrayOutput) ToNetworkStorageArrayOutput() NetworkStorageArrayOutput {
	return o
}

func (o NetworkStorageArrayOutput) ToNetworkStorageArrayOutputWithContext(ctx context.Context) NetworkStorageArrayOutput {
	return o
}

func (o NetworkStorageArrayOutput) Index(i pulumi.IntInput) NetworkStorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkStorage {
		return vs[0].([]*NetworkStorage)[vs[1].(int)]
	}).(NetworkStorageOutput)
}

type NetworkStorageMapOutput struct{ *pulumi.OutputState }

func (NetworkStorageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkStorage)(nil)).Elem()
}

func (o NetworkStorageMapOutput) ToNetworkStorageMapOutput() NetworkStorageMapOutput {
	return o
}

func (o NetworkStorageMapOutput) ToNetworkStorageMapOutputWithContext(ctx context.Context) NetworkStorageMapOutput {
	return o
}

func (o NetworkStorageMapOutput) MapIndex(k pulumi.StringInput) NetworkStorageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkStorage {
		return vs[0].(map[string]*NetworkStorage)[vs[1].(string)]
	}).(NetworkStorageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkStorageInput)(nil)).Elem(), &NetworkStorage{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkStorageArrayInput)(nil)).Elem(), NetworkStorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkStorageMapInput)(nil)).Elem(), NetworkStorageMap{})
	pulumi.RegisterOutputType(NetworkStorageOutput{})
	pulumi.RegisterOutputType(NetworkStorageArrayOutput{})
	pulumi.RegisterOutputType(NetworkStorageMapOutput{})
}
