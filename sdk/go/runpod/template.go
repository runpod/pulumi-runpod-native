// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package runpod

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/runpod/pulumi-runpod-native/sdk/go/runpod/internal"
)

type Template struct {
	pulumi.CustomResourceState

	ContainerDiskInGb       pulumi.IntOutput       `pulumi:"containerDiskInGb"`
	ContainerRegistryAuthId pulumi.StringPtrOutput `pulumi:"containerRegistryAuthId"`
	DockerArgs              pulumi.StringOutput    `pulumi:"dockerArgs"`
	Env                     PodEnvArrayOutput      `pulumi:"env"`
	ImageName               pulumi.StringOutput    `pulumi:"imageName"`
	IsPublic                pulumi.BoolPtrOutput   `pulumi:"isPublic"`
	IsServerless            pulumi.BoolPtrOutput   `pulumi:"isServerless"`
	Name                    pulumi.StringOutput    `pulumi:"name"`
	Ports                   pulumi.StringPtrOutput `pulumi:"ports"`
	Readme                  pulumi.StringPtrOutput `pulumi:"readme"`
	StartJupyter            pulumi.BoolPtrOutput   `pulumi:"startJupyter"`
	StartSsh                pulumi.BoolPtrOutput   `pulumi:"startSsh"`
	Template                TemplateTypeOutput     `pulumi:"template"`
	VolumeInGb              pulumi.IntOutput       `pulumi:"volumeInGb"`
	VolumeMountPath         pulumi.StringPtrOutput `pulumi:"volumeMountPath"`
}

// NewTemplate registers a new resource with the given unique name, arguments, and options.
func NewTemplate(ctx *pulumi.Context,
	name string, args *TemplateArgs, opts ...pulumi.ResourceOption) (*Template, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerDiskInGb == nil {
		return nil, errors.New("invalid value for required argument 'ContainerDiskInGb'")
	}
	if args.DockerArgs == nil {
		return nil, errors.New("invalid value for required argument 'DockerArgs'")
	}
	if args.Env == nil {
		return nil, errors.New("invalid value for required argument 'Env'")
	}
	if args.ImageName == nil {
		return nil, errors.New("invalid value for required argument 'ImageName'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.VolumeInGb == nil {
		return nil, errors.New("invalid value for required argument 'VolumeInGb'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Template
	err := ctx.RegisterResource("runpod:index:Template", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplate gets an existing Template resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateState, opts ...pulumi.ResourceOption) (*Template, error) {
	var resource Template
	err := ctx.ReadResource("runpod:index:Template", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Template resources.
type templateState struct {
}

type TemplateState struct {
}

func (TemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateState)(nil)).Elem()
}

type templateArgs struct {
	ContainerDiskInGb       int      `pulumi:"containerDiskInGb"`
	ContainerRegistryAuthId *string  `pulumi:"containerRegistryAuthId"`
	DockerArgs              string   `pulumi:"dockerArgs"`
	Env                     []PodEnv `pulumi:"env"`
	ImageName               string   `pulumi:"imageName"`
	IsPublic                *bool    `pulumi:"isPublic"`
	IsServerless            *bool    `pulumi:"isServerless"`
	Name                    string   `pulumi:"name"`
	Ports                   *string  `pulumi:"ports"`
	Readme                  *string  `pulumi:"readme"`
	StartJupyter            *bool    `pulumi:"startJupyter"`
	StartSsh                *bool    `pulumi:"startSsh"`
	VolumeInGb              int      `pulumi:"volumeInGb"`
	VolumeMountPath         *string  `pulumi:"volumeMountPath"`
}

// The set of arguments for constructing a Template resource.
type TemplateArgs struct {
	ContainerDiskInGb       pulumi.IntInput
	ContainerRegistryAuthId pulumi.StringPtrInput
	DockerArgs              pulumi.StringInput
	Env                     PodEnvArrayInput
	ImageName               pulumi.StringInput
	IsPublic                pulumi.BoolPtrInput
	IsServerless            pulumi.BoolPtrInput
	Name                    pulumi.StringInput
	Ports                   pulumi.StringPtrInput
	Readme                  pulumi.StringPtrInput
	StartJupyter            pulumi.BoolPtrInput
	StartSsh                pulumi.BoolPtrInput
	VolumeInGb              pulumi.IntInput
	VolumeMountPath         pulumi.StringPtrInput
}

func (TemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateArgs)(nil)).Elem()
}

type TemplateInput interface {
	pulumi.Input

	ToTemplateOutput() TemplateOutput
	ToTemplateOutputWithContext(ctx context.Context) TemplateOutput
}

func (*Template) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (i *Template) ToTemplateOutput() TemplateOutput {
	return i.ToTemplateOutputWithContext(context.Background())
}

func (i *Template) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateOutput)
}

// TemplateArrayInput is an input type that accepts TemplateArray and TemplateArrayOutput values.
// You can construct a concrete instance of `TemplateArrayInput` via:
//
//	TemplateArray{ TemplateArgs{...} }
type TemplateArrayInput interface {
	pulumi.Input

	ToTemplateArrayOutput() TemplateArrayOutput
	ToTemplateArrayOutputWithContext(context.Context) TemplateArrayOutput
}

type TemplateArray []TemplateInput

func (TemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Template)(nil)).Elem()
}

func (i TemplateArray) ToTemplateArrayOutput() TemplateArrayOutput {
	return i.ToTemplateArrayOutputWithContext(context.Background())
}

func (i TemplateArray) ToTemplateArrayOutputWithContext(ctx context.Context) TemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateArrayOutput)
}

// TemplateMapInput is an input type that accepts TemplateMap and TemplateMapOutput values.
// You can construct a concrete instance of `TemplateMapInput` via:
//
//	TemplateMap{ "key": TemplateArgs{...} }
type TemplateMapInput interface {
	pulumi.Input

	ToTemplateMapOutput() TemplateMapOutput
	ToTemplateMapOutputWithContext(context.Context) TemplateMapOutput
}

type TemplateMap map[string]TemplateInput

func (TemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Template)(nil)).Elem()
}

func (i TemplateMap) ToTemplateMapOutput() TemplateMapOutput {
	return i.ToTemplateMapOutputWithContext(context.Background())
}

func (i TemplateMap) ToTemplateMapOutputWithContext(ctx context.Context) TemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMapOutput)
}

type TemplateOutput struct{ *pulumi.OutputState }

func (TemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (o TemplateOutput) ToTemplateOutput() TemplateOutput {
	return o
}

func (o TemplateOutput) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return o
}

func (o TemplateOutput) ContainerDiskInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *Template) pulumi.IntOutput { return v.ContainerDiskInGb }).(pulumi.IntOutput)
}

func (o TemplateOutput) ContainerRegistryAuthId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.StringPtrOutput { return v.ContainerRegistryAuthId }).(pulumi.StringPtrOutput)
}

func (o TemplateOutput) DockerArgs() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.DockerArgs }).(pulumi.StringOutput)
}

func (o TemplateOutput) Env() PodEnvArrayOutput {
	return o.ApplyT(func(v *Template) PodEnvArrayOutput { return v.Env }).(PodEnvArrayOutput)
}

func (o TemplateOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

func (o TemplateOutput) IsPublic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.BoolPtrOutput { return v.IsPublic }).(pulumi.BoolPtrOutput)
}

func (o TemplateOutput) IsServerless() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.BoolPtrOutput { return v.IsServerless }).(pulumi.BoolPtrOutput)
}

func (o TemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Template) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TemplateOutput) Ports() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.StringPtrOutput { return v.Ports }).(pulumi.StringPtrOutput)
}

func (o TemplateOutput) Readme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.StringPtrOutput { return v.Readme }).(pulumi.StringPtrOutput)
}

func (o TemplateOutput) StartJupyter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.BoolPtrOutput { return v.StartJupyter }).(pulumi.BoolPtrOutput)
}

func (o TemplateOutput) StartSsh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.BoolPtrOutput { return v.StartSsh }).(pulumi.BoolPtrOutput)
}

func (o TemplateOutput) Template() TemplateTypeOutput {
	return o.ApplyT(func(v *Template) TemplateTypeOutput { return v.Template }).(TemplateTypeOutput)
}

func (o TemplateOutput) VolumeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *Template) pulumi.IntOutput { return v.VolumeInGb }).(pulumi.IntOutput)
}

func (o TemplateOutput) VolumeMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) pulumi.StringPtrOutput { return v.VolumeMountPath }).(pulumi.StringPtrOutput)
}

type TemplateArrayOutput struct{ *pulumi.OutputState }

func (TemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Template)(nil)).Elem()
}

func (o TemplateArrayOutput) ToTemplateArrayOutput() TemplateArrayOutput {
	return o
}

func (o TemplateArrayOutput) ToTemplateArrayOutputWithContext(ctx context.Context) TemplateArrayOutput {
	return o
}

func (o TemplateArrayOutput) Index(i pulumi.IntInput) TemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Template {
		return vs[0].([]*Template)[vs[1].(int)]
	}).(TemplateOutput)
}

type TemplateMapOutput struct{ *pulumi.OutputState }

func (TemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Template)(nil)).Elem()
}

func (o TemplateMapOutput) ToTemplateMapOutput() TemplateMapOutput {
	return o
}

func (o TemplateMapOutput) ToTemplateMapOutputWithContext(ctx context.Context) TemplateMapOutput {
	return o
}

func (o TemplateMapOutput) MapIndex(k pulumi.StringInput) TemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Template {
		return vs[0].(map[string]*Template)[vs[1].(string)]
	}).(TemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInput)(nil)).Elem(), &Template{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateArrayInput)(nil)).Elem(), TemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMapInput)(nil)).Elem(), TemplateMap{})
	pulumi.RegisterOutputType(TemplateOutput{})
	pulumi.RegisterOutputType(TemplateArrayOutput{})
	pulumi.RegisterOutputType(TemplateMapOutput{})
}
