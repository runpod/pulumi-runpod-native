// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Pod extends pulumi.CustomResource {
    /**
     * Get an existing Pod resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Pod {
        return new Pod(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'runpod:index:Pod';

    /**
     * Returns true if the given object is an instance of Pod.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pod {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pod.__pulumiType;
    }

    public readonly aiApiId!: pulumi.Output<string | undefined>;
    public readonly cloudType!: pulumi.Output<string | undefined>;
    public readonly containerDiskInGb!: pulumi.Output<number | undefined>;
    public readonly countryCode!: pulumi.Output<string | undefined>;
    public readonly cudaVersion!: pulumi.Output<string | undefined>;
    public readonly dataCenterId!: pulumi.Output<string | undefined>;
    public readonly deployCost!: pulumi.Output<number | undefined>;
    public readonly dockerArgs!: pulumi.Output<string | undefined>;
    public readonly env!: pulumi.Output<outputs.PodEnv[] | undefined>;
    public readonly gpuCount!: pulumi.Output<number>;
    public readonly gpuTypeId!: pulumi.Output<string>;
    public readonly gpuTypeIdList!: pulumi.Output<string[] | undefined>;
    public readonly imageName!: pulumi.Output<string>;
    public readonly minDisk!: pulumi.Output<number | undefined>;
    public readonly minDownload!: pulumi.Output<number | undefined>;
    public readonly minMemoryInGb!: pulumi.Output<number | undefined>;
    public readonly minUpload!: pulumi.Output<number | undefined>;
    public readonly minVcpuCount!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string | undefined>;
    public readonly networkVolumeId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly pod!: pulumi.Output<outputs.Pod>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly ports!: pulumi.Output<string | undefined>;
    public readonly savingsPlan!: pulumi.Output<outputs.SavingsPlanInput | undefined>;
    public readonly startJupyter!: pulumi.Output<boolean | undefined>;
    public readonly startSsh!: pulumi.Output<boolean | undefined>;
    public readonly stopAfter!: pulumi.Output<string | undefined>;
    public readonly supportPublicIp!: pulumi.Output<boolean | undefined>;
    public readonly templateId!: pulumi.Output<string | undefined>;
    public readonly terminateAfter!: pulumi.Output<string | undefined>;
    public readonly volumeInGb!: pulumi.Output<number | undefined>;
    public readonly volumeKey!: pulumi.Output<string | undefined>;
    public readonly volumeMountPath!: pulumi.Output<string | undefined>;

    /**
     * Create a Pod resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PodArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.gpuCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gpuCount'");
            }
            if ((!args || args.gpuTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gpuTypeId'");
            }
            if ((!args || args.imageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageName'");
            }
            resourceInputs["aiApiId"] = args ? args.aiApiId : undefined;
            resourceInputs["cloudType"] = args ? args.cloudType : undefined;
            resourceInputs["containerDiskInGb"] = args ? args.containerDiskInGb : undefined;
            resourceInputs["countryCode"] = args ? args.countryCode : undefined;
            resourceInputs["cudaVersion"] = args ? args.cudaVersion : undefined;
            resourceInputs["dataCenterId"] = args ? args.dataCenterId : undefined;
            resourceInputs["deployCost"] = args ? args.deployCost : undefined;
            resourceInputs["dockerArgs"] = args ? args.dockerArgs : undefined;
            resourceInputs["env"] = args ? args.env : undefined;
            resourceInputs["gpuCount"] = args ? args.gpuCount : undefined;
            resourceInputs["gpuTypeId"] = args ? args.gpuTypeId : undefined;
            resourceInputs["gpuTypeIdList"] = args ? args.gpuTypeIdList : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["minDisk"] = args ? args.minDisk : undefined;
            resourceInputs["minDownload"] = args ? args.minDownload : undefined;
            resourceInputs["minMemoryInGb"] = args ? args.minMemoryInGb : undefined;
            resourceInputs["minUpload"] = args ? args.minUpload : undefined;
            resourceInputs["minVcpuCount"] = args ? args.minVcpuCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkVolumeId"] = args ? args.networkVolumeId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["savingsPlan"] = args ? args.savingsPlan : undefined;
            resourceInputs["startJupyter"] = args ? args.startJupyter : undefined;
            resourceInputs["startSsh"] = args ? args.startSsh : undefined;
            resourceInputs["stopAfter"] = args ? args.stopAfter : undefined;
            resourceInputs["supportPublicIp"] = args ? args.supportPublicIp : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["terminateAfter"] = args ? args.terminateAfter : undefined;
            resourceInputs["volumeInGb"] = args ? args.volumeInGb : undefined;
            resourceInputs["volumeKey"] = args ? args.volumeKey : undefined;
            resourceInputs["volumeMountPath"] = args ? args.volumeMountPath : undefined;
            resourceInputs["pod"] = undefined /*out*/;
        } else {
            resourceInputs["aiApiId"] = undefined /*out*/;
            resourceInputs["cloudType"] = undefined /*out*/;
            resourceInputs["containerDiskInGb"] = undefined /*out*/;
            resourceInputs["countryCode"] = undefined /*out*/;
            resourceInputs["cudaVersion"] = undefined /*out*/;
            resourceInputs["dataCenterId"] = undefined /*out*/;
            resourceInputs["deployCost"] = undefined /*out*/;
            resourceInputs["dockerArgs"] = undefined /*out*/;
            resourceInputs["env"] = undefined /*out*/;
            resourceInputs["gpuCount"] = undefined /*out*/;
            resourceInputs["gpuTypeId"] = undefined /*out*/;
            resourceInputs["gpuTypeIdList"] = undefined /*out*/;
            resourceInputs["imageName"] = undefined /*out*/;
            resourceInputs["minDisk"] = undefined /*out*/;
            resourceInputs["minDownload"] = undefined /*out*/;
            resourceInputs["minMemoryInGb"] = undefined /*out*/;
            resourceInputs["minUpload"] = undefined /*out*/;
            resourceInputs["minVcpuCount"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkVolumeId"] = undefined /*out*/;
            resourceInputs["pod"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["ports"] = undefined /*out*/;
            resourceInputs["savingsPlan"] = undefined /*out*/;
            resourceInputs["startJupyter"] = undefined /*out*/;
            resourceInputs["startSsh"] = undefined /*out*/;
            resourceInputs["stopAfter"] = undefined /*out*/;
            resourceInputs["supportPublicIp"] = undefined /*out*/;
            resourceInputs["templateId"] = undefined /*out*/;
            resourceInputs["terminateAfter"] = undefined /*out*/;
            resourceInputs["volumeInGb"] = undefined /*out*/;
            resourceInputs["volumeKey"] = undefined /*out*/;
            resourceInputs["volumeMountPath"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pod.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Pod resource.
 */
export interface PodArgs {
    aiApiId?: pulumi.Input<string>;
    cloudType?: pulumi.Input<string>;
    containerDiskInGb?: pulumi.Input<number>;
    countryCode?: pulumi.Input<string>;
    cudaVersion?: pulumi.Input<string>;
    dataCenterId?: pulumi.Input<string>;
    deployCost?: pulumi.Input<number>;
    dockerArgs?: pulumi.Input<string>;
    env?: pulumi.Input<pulumi.Input<inputs.PodEnvArgs>[]>;
    gpuCount: pulumi.Input<number>;
    gpuTypeId: pulumi.Input<string>;
    gpuTypeIdList?: pulumi.Input<pulumi.Input<string>[]>;
    imageName: pulumi.Input<string>;
    minDisk?: pulumi.Input<number>;
    minDownload?: pulumi.Input<number>;
    minMemoryInGb?: pulumi.Input<number>;
    minUpload?: pulumi.Input<number>;
    minVcpuCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkVolumeId?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    ports?: pulumi.Input<string>;
    savingsPlan?: pulumi.Input<inputs.SavingsPlanInputArgs>;
    startJupyter?: pulumi.Input<boolean>;
    startSsh?: pulumi.Input<boolean>;
    stopAfter?: pulumi.Input<string>;
    supportPublicIp?: pulumi.Input<boolean>;
    templateId?: pulumi.Input<string>;
    terminateAfter?: pulumi.Input<string>;
    volumeInGb?: pulumi.Input<number>;
    volumeKey?: pulumi.Input<string>;
    volumeMountPath?: pulumi.Input<string>;
}
