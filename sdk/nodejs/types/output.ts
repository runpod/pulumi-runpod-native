// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DataCenter {
    id: string;
    location: string;
    name: string;
    storageSupport: boolean;
}

export interface Endpoint {
    gpuIds: string;
    id: string;
    idleTimeout: number;
    locations: string;
    name: string;
    networkVolumeId: string;
    scalerType: string;
    scalerValue: number;
    templateId: string;
    workersMax: number;
    workersMin: number;
}

export interface Gpu {
    id: string;
    podId: string;
}

export interface NetworkStorage {
    dataCenter: outputs.DataCenter;
    dataCenterId: string;
    id: string;
    name: string;
    size: number;
}

export interface Pod {
    adjustedCostPerHr: number;
    aiApiId: string;
    apiKey: string;
    consumerUserId: string;
    containerDiskInGb: number;
    containerRegistryAuthId: string;
    costMultiplier: number;
    costPerHr: number;
    createdAt: string;
    desiredStatus: string;
    dockerArgs: string;
    dockerId: string;
    env?: string[];
    gpuCount: number;
    gpuPowerLimitPercent: number;
    gpus?: outputs.Gpu[];
    id: string;
    imageName: string;
    lastStartedAt: string;
    lastStatusChange: string;
    locked: boolean;
    machineId: string;
    memoryInGb: number;
    name: string;
    podType: string;
    port: number;
    ports: string;
    registry: outputs.PodRegistry;
    templateId: string;
    uptimeSeconds: number;
    vcpuCount: number;
    version: number;
    volumeEncrypted: boolean;
    volumeInGb: number;
    volumeKey: string;
    volumeMountPath: string;
}

export interface PodEnv {
    key: string;
    value: string;
}

export interface PodRegistry {
    auth: string;
    pass: string;
    url: string;
    user: string;
    username: string;
}

export interface SavingsPlanInput {
    planLength: string;
    upfrontCost: number;
}

export interface Template {
    advancedStart: boolean;
    boundEndpointId: string;
    category: string;
    containerDiskInGb: number;
    containerRegistryAuthId: string;
    dockerArgs: string;
    earned: number;
    env?: outputs.PodEnv[];
    id: string;
    imageName: string;
    isPublic: boolean;
    isRunpod: boolean;
    isServerless: boolean;
    name: string;
    ports: string;
    readme: string;
    runtimeInMin: number;
    startJupyter: boolean;
    startScript: string;
    startSsh: boolean;
    volumeInGb: number;
    volumeMountPath: string;
}

